name: Prepare QCW Lima (from revision)
on:
  workflow_dispatch:
  workflow_call:
    outputs:
      lima_version:
        description: "Lima version"
        value: ${{ jobs.build.outputs.lima_version }}
      gowsllinks_version:
        description: "go-wsllinks version"
        value: ${{ jobs.build.outputs.gowsllinks_version }}
      bundles_version:
        description: "bundles version"
        value: ${{ jobs.build.outputs.bundles_version }}
      alpine_version:
        description: "Alpine version"
        value: ${{ jobs.build.outputs.alpine_version }}
      alpine_wsl_version:
        description: "Alpine-WSL version"
        value: ${{ jobs.build.outputs.alpine_wsl_version }}
env:
  LIMA_GITURL: https://github.com/arixmkii/lima.git
  LIMA_SHA: 3c924f1b95d38aee392c25989e530b7563283df6
  LIMA_VERSION: dev
jobs:
  # call-prepare-alpine-wsl:
  #   uses: ./.github/workflows/prepare-alpine-wsl-release.yml
  # call-prepare-go-wsllinks:
  #   uses: ./.github/workflows/prepare-go-wsllinks-release.yml

  build:
    # needs: [call-prepare-go-wsllinks, call-prepare-alpine-wsl]
    runs-on: windows-latest
    outputs:
      lima_version: ${{ steps.make_versions.outputs.lima }}
      gowsllinks_version: ${{ steps.make_versions.outputs.gowsllinks }}
      bundles_version: ${{ steps.make_versions.outputs.bundles }}
      alpine_version: ${{ steps.make_versions.outputs.alpine }}
      alpine_wsl_version: ${{ steps.make_versions.outputs.alpine_wsl }}
    steps:
      - name: "üèóÔ∏è Install msys2 (user)"
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >-
            git make
      - name: "üìù Configure checkout"
        run: |
          git config --global core.autocrlf input
      - name: "üìù Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: "üìù Fetch sources"
        shell: msys2 {0}
        run: |
          mkdir lima-release
          cd lima-release
          git init
          git config --local core.symlinks true
          git config --local core.autocrlf false
          git config --local core.eol lf
          git remote add origin $LIMA_GITURL
          git fetch --tags origin $LIMA_SHA
          git checkout FETCH_HEAD
      - name: "üõ†Ô∏è Build Lima"
        working-directory: lima-release
        run: |
          make
      - name: Enable WSL2
        run: |
          wsl --set-default-version 2
          wsl --shutdown
          wsl --update
          wsl --status
          wsl --version
          wsl --list --online
      - name: Install WSL2 distro
        run: |
          # FIXME: At least one distro has to be installed here,
          # otherwise `wsl --list --verbose` (called from Lima) fails:
          # https://github.com/lima-vm/lima/pull/1826#issuecomment-1729993334
          # The distro image itself is not consumed by Lima.
          # ------------------------------------------------------------------
          wsl --import dummy $env:TEMP nul
          wsl --list --verbose
      - name: Integration tests (WSL2, Windows host)
        working-directory: lima-release
        run: |
          $env:PATH = "$pwd\_output\bin;" + 'C:\msys64\usr\bin;' + $env:PATH
          pacman -Sy --noconfirm openbsd-netcat diffutils
          $env:MSYS2_ENV_CONV_EXCL = 'HOME_HOST;HOME_GUEST;_LIMA_WINDOWS_EXTRA_PATH'
          $env:HOME_HOST = $(cygpath.exe "$env:USERPROFILE")
          $env:HOME_GUEST = "/mnt$env:HOME_HOST"
          $env:LIMACTL_CREATE_ARGS = '--vm-type=wsl2 --mount-type=wsl2 --containerd=system'
          $env:_LIMA_WINDOWS_EXTRA_PATH = 'C:\Program Files\Git\usr\bin'
          bash.exe -c "./hack/test-templates.sh templates/experimental/wsl2.yaml"
