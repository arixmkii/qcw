name: Prepare QCW Lima (from revision)
on:
  workflow_dispatch:
  workflow_call:
    outputs:
      lima_version:
        description: "Lima version"
        value: ${{ jobs.build.outputs.lima_version }}
      gowsllinks_version:
        description: "go-wsllinks version"
        value: ${{ jobs.build.outputs.gowsllinks_version }}
      alpine_version:
        description: "Alpine version"
        value: ${{ jobs.build.outputs.alpine_version }}
      alpine_wsl_version:
        description: "Alpine-WSL version"
        value: ${{ jobs.build.outputs.alpine_wsl_version }}
env:
  LIMA_GITURL: https://github.com/lima-vm/lima.git
  LIMA_SHA: 439c9de34eaccaa2910f7df55608b1c1d8ecbcba
  LIMA_VERSION: dev
jobs:
  call-prepare-alpine-wsl:
    uses: ./.github/workflows/prepare-alpine-wsl-release.yml
  call-prepare-go-wsllinks:
    uses: ./.github/workflows/prepare-go-wsllinks-release.yml
  build:
    needs: [call-prepare-go-wsllinks, call-prepare-alpine-wsl]
    runs-on: windows-2025
    outputs:
      lima_version: ${{ steps.make_versions.outputs.lima }}
      gowsllinks_version: ${{ steps.make_versions.outputs.gowsllinks }}
      alpine_version: ${{ steps.make_versions.outputs.alpine }}
      alpine_wsl_version: ${{ steps.make_versions.outputs.alpine_wsl }}
    steps:
      - name: "üèóÔ∏è Install msys2"
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >-
            make git unzip base-devel mingw-w64-ucrt-x86_64-toolchain zip mingw-w64-ucrt-x86_64-go mingw-w64-ucrt-x86_64-qemu mingw-w64-ucrt-x86_64-jq mingw-w64-ucrt-x86_64-curl openbsd-netcat socat
      - name: "üèóÔ∏è Install yq"
        shell: msys2 {0}
        run: |
            mkdir -p /usr/local/bin
            curl -o /usr/local/bin/yq.exe -L https://github.com/mikefarah/yq/releases/download/v4.45.1/yq_windows_amd64.exe
      - name: "üìù Configure checkout"
        run: git config --global core.autocrlf input
      - name: "üìù Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: "üõª Donwload artifacts"
        uses: actions/download-artifact@v4
        with:
          path: qcw-art
      - name: "üèóÔ∏è Install lima-infra"
        shell: pwsh
        run: |
          wsl --set-default-version 2
          wsl --shutdown
          wsl --version
          wsl --install -n --from-file qcw-art/qcw-alpine/lima-infra.wsl
          wsl -l -v
      - name: "‚öôÔ∏è Configure firewalls"
        shell: pwsh
        run: |
          Import-Module -Name NetSecurity -UseWindowsPowerShell
          Set-NetFirewallHyperVVMSetting -Name '{40E0AC32-46A5-438A-A0B2-2B479E8F2E90}' -DefaultInboundAction Allow
          New-NetFirewallRule -DisplayName "Allow QEMU x86_64" -Direction Inbound -Program "D:\a\_temp\msys64\ucrt64\bin\qemu-system-x86_64.exe" -Action Allow
          New-NetFirewallRule -DisplayName "Allow QEMU x86_64w" -Direction Inbound -Program "D:\a\_temp\msys64\ucrt64\bin\qemu-system-x86_64w.exe" -Action Allow
      - name: "‚úÖ Check user"
        shell: pwsh
        run: |
          cmd /c "start wsl -d lima-infra -u root bash -c `"until pkill -KILL -u 1000; do sleep 1; done`""
          wsl -d lima-infra
          wsl -d lima-infra whoami
          wsl -d lima-infra -u lima whoami
          wsl -d lima-infra wslinfo --networking-mode
      - name: "üìù Fetch sources"
        shell: msys2 {0}
        run: |
          mkdir lima-release
          cd lima-release
          git init
          git remote add origin $LIMA_GITURL
          git fetch --depth 1 origin $LIMA_SHA
          git checkout FETCH_HEAD
          patch --binary -l -p 1 < ../patches/lima/0001-Enable-Integration-tests-in-Windows-CI.patch
          patch --binary -l -p 1 < ../patches/lima/0002-Add-QEMU-driver-support-on-Windows-hosts.patch
      - name: "üõ†Ô∏è Build Lima"
        working-directory: lima-release
        shell: msys2 {0}
        run: |
          cp -f ../qcw-art/qcw-go-wsllinks/go-wsllinks.exe ./contrib/bundle-wsl/go-wsllinks.exe
          make binaries add-bundles
      - name: "üß™ Test Lima Git tools WSL2 (NAT)"
        working-directory: lima-release
        shell: msys2 {0}
        run: |
          rm -f "$(cygpath $USERPROFILE)/.lima/_config/user"* || true
          wsl -d lima-infra -u root bash -c "ip link delete nerdctl0 || true"
          export PATH=$PWD/_output/bin:$PATH
          export MSYS2_ENV_CONV_EXCL='HOME_HOST;HOME_GUEST'
          export LIMACTL_CREATE_ARGS='--vm-type=wsl2 --mount-type=wsl2 --containerd=system'
          export HOME_HOST=$(cygpath $USERPROFILE)
          export HOME_GUEST=$(wsl -d lima-infra wslpath $(cygpath -m $USERPROFILE))
          PATH=/c/Program\ Files/Git/usr/bin:$PATH cmd.exe //C "bash -c './hack/test-templates.sh templates/experimental/wsl2.yaml'"
      - name: "üß™ Test Lima QEMU WSL2 (NAT)"
        working-directory: lima-release
        shell: msys2 {0}
        run: |
          rm -f "$(cygpath $USERPROFILE)/.lima/_config/user"* || true
          wsl -d lima-infra -u root bash -c "ip link delete nerdctl0 || true"
          export PATH=$PWD/_output/bin:$PATH
          export MSYS2_ENV_CONV_EXCL='HOME_HOST;HOME_GUEST'
          export LIMACTL_CREATE_ARGS='--vm-type=qemu'
          export HOME_HOST=$(cygpath $USERPROFILE)
          export HOME_GUEST=$(wsl -d lima-infra wslpath $(cygpath -m $USERPROFILE))
          LIMA_BUNDLED_TOOLS_DIR=bundle-wsl ./hack/test-templates.sh templates/default.yaml
      - name: "üß™ Test Lima WSL2 (NAT)"
        working-directory: lima-release
        shell: msys2 {0}
        run: |
          rm -f "$(cygpath $USERPROFILE)/.lima/_config/user"* || true
          wsl -d lima-infra -u root bash -c "ip link delete nerdctl0 || true"
          export PATH=$PWD/_output/bin:$PATH
          export MSYS2_ENV_CONV_EXCL='HOME_HOST;HOME_GUEST'
          export LIMACTL_CREATE_ARGS='--vm-type=wsl2 --mount-type=wsl2 --containerd=system'
          export HOME_HOST=$(cygpath $USERPROFILE)
          export HOME_GUEST=$(wsl -d lima-infra wslpath $(cygpath -m $USERPROFILE))
          LIMA_BUNDLED_TOOLS_DIR=bundle-wsl ./hack/test-templates.sh templates/experimental/wsl2.yaml
      # - name: "‚öôÔ∏è Configure WSL2 networking mode mirrored"
      #   shell: msys2 {0}
      #   run: |
      #     cat /c/Users/runneradmin/.wslconfig || true
      #     cat > /c/Users/runneradmin/.wslconfig <<EOF
      #     [wsl2]
      #     networkingMode=mirrored
      #     [experimental]
      #     hostAddressLoopback=true
      #     EOF
      #     cat /c/Users/runneradmin/.wslconfig
      #     wsl --shutdown
      #     sleep 8
      - name: "üì¶ Pack Lima"
        shell: msys2 {0}
        run: |
          mkdir -p qcw
          mkdir -p qcw-tmp
          cp -r "lima-release/_output" qcw-tmp/lima
          cd qcw-tmp/
          zip -9 -r ../qcw/lima.zip .
          cd ../qcw
          find . -type f \( ! -iname "*.checksums" \) -exec sha256sum -b {} \; > sha.checksums
          find . -type f \( ! -iname "*.checksums" \) -exec sha512sum -b {} \; >> sha.checksums
          cat sha.checksums
      - id: make_versions
        name: "üìå Export versions"
        env:
          GOWSLLINKS_VERSION: ${{ needs.call-prepare-go-wsllinks.outputs.gowsllinks_version }}
          ALPINE_VERSION: ${{ needs.call-prepare-alpine-wsl.outputs.alpine_version }}
          ALPINEWSL_VERSION: ${{ needs.call-prepare-alpine-wsl.outputs.alpine_wsl_version }}
        shell: msys2 {0}
        run: |
          echo "lima=$LIMA_VERSION-$LIMA_SHA" >> "$GITHUB_OUTPUT"
          echo "gowsllinks=$GOWSLLINKS_VERSION" >> "$GITHUB_OUTPUT"
          echo "alpine=$ALPINE_VERSION" >> "$GITHUB_OUTPUT"
          echo "alpine_wsl=$ALPINEWSL_VERSION" >> "$GITHUB_OUTPUT"
      - name: "üöÄ Upload artifact"
        uses: actions/upload-artifact@v4
        with:
          name: qcw-lima
          path: qcw
