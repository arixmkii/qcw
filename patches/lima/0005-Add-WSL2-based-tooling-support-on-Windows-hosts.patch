From 0e77ba869919879ca04060a5d55439ae4ae21289 Mon Sep 17 00:00:00 2001
From: Arthur Sengileyev <arthur.sengileyev@gmail.com>
Date: Sat, 8 Mar 2025 23:30:25 +0200
Subject: [PATCH 4/4] Add WSL2 based tooling support on Windows hosts

Signed-off-by: Arthur Sengileyev <arthur.sengileyev@gmail.com>
---
 pkg/ioutilx/ioutilx.go | 10 ++++++++++
 pkg/sshutil/sshutil.go |  6 ++++++
 pkg/store/instance.go  | 25 +++++++++++++++++++++++++
 3 files changed, 41 insertions(+)

diff --git a/pkg/ioutilx/ioutilx.go b/pkg/ioutilx/ioutilx.go
index 9b5ccbe0..960b38e9 100644
--- a/pkg/ioutilx/ioutilx.go
+++ b/pkg/ioutilx/ioutilx.go
@@ -66,3 +66,13 @@ func WindowsSubsystemPathForLinux(orig, distro string) (string, error) {
 	}
 	return strings.TrimSpace(string(out)), nil
 }
+
+func IsLocalWindowsFS() (bool, error) {
+	out, err := exec.Command("cygpath", "-w", "/").CombinedOutput()
+	if err != nil {
+		logrus.WithError(err).Errorf("failed to convert path to Windows, maybe not using Git ssh?")
+		return false, err
+	}
+	res := strings.TrimSpace(string(out))
+	return len(filepath.VolumeName(res)) == 2 && res != "\\\\", nil
+}
diff --git a/pkg/sshutil/sshutil.go b/pkg/sshutil/sshutil.go
index 1d8a5f15..05d06056 100644
--- a/pkg/sshutil/sshutil.go
+++ b/pkg/sshutil/sshutil.go
@@ -12,6 +12,7 @@ import (
 	"io/fs"
 	"os"
 	"os/exec"
+	"path"
 	"path/filepath"
 	"regexp"
 	"runtime"
@@ -289,6 +290,11 @@ func SSHOpts(sshPath, instDir, username string, useDotSSH, forwardAgent, forward
 		if err != nil {
 			return nil, err
 		}
+		localFS, err := ioutilx.IsLocalWindowsFS()
+		if err == nil && !localFS {
+			controlSock = strings.ReplaceAll(controlSock, "/", "_")
+			controlSock = path.Join("/var/opt/lima", strings.TrimPrefix(controlSock, "_mnt_"))
+		}
 		controlPath = fmt.Sprintf(`ControlPath='%s'`, controlSock)
 	}
 	opts = append(opts,
diff --git a/pkg/store/instance.go b/pkg/store/instance.go
index 2ddd4380..3de2de4a 100644
--- a/pkg/store/instance.go
+++ b/pkg/store/instance.go
@@ -9,6 +9,7 @@ import (
 	"fmt"
 	"io"
 	"os"
+	"os/exec"
 	"os/user"
 	"path/filepath"
 	"runtime"
@@ -22,6 +23,7 @@ import (
 	"github.com/docker/go-units"
 	hostagentclient "github.com/lima-vm/lima/pkg/hostagent/api/client"
 	"github.com/lima-vm/lima/pkg/identifierutil"
+	"github.com/lima-vm/lima/pkg/ioutilx"
 	"github.com/lima-vm/lima/pkg/limayaml"
 	"github.com/lima-vm/lima/pkg/store/dirnames"
 	"github.com/lima-vm/lima/pkg/store/filenames"
@@ -98,6 +100,20 @@ func Inspect(instName string) (*Instance, error) {
 	inst.VMType = *y.VMType
 	inst.CPUType = y.CPUType[*y.Arch]
 	inst.SSHAddress = "127.0.0.1"
+	if runtime.GOOS == "windows" && inst.VMType == limayaml.QEMU {
+		localFS, err := ioutilx.IsLocalWindowsFS()
+		if err == nil && !localFS {
+			mode, err := call([]string{"wsl", "-d", "lima-infra", "wslinfo", "--networking-mode"})
+			if err == nil && mode == "nat" {
+				addr, err := call([]string{"wsl", "-d", "lima-infra", "bash", "-c", "ip route show | grep -i default | awk '{print \\$3}'"})
+				if err == nil {
+					inst.SSHAddress = addr
+				} else {
+					return nil, err
+				}
+			}
+		}
+	}
 	inst.SSHLocalPort = *y.SSH.LocalPort // maybe 0
 	inst.SSHConfigFile = filepath.Join(instDir, filenames.SSHConfig)
 	inst.HostAgentPID, err = ReadPIDFile(filepath.Join(instDir, filenames.HostAgentPID))
@@ -185,6 +201,15 @@ func Inspect(instName string) (*Instance, error) {
 	return inst, nil
 }
 
+func call(args []string) (string, error) {
+	cmd := exec.Command(args[0], args[1:]...)
+	out, err := cmd.Output()
+	if err != nil {
+		return "", err
+	}
+	return strings.TrimSpace(string(out)), nil
+}
+
 func inspectStatusWithPIDFiles(instDir string, inst *Instance, y *limayaml.LimaYAML) {
 	var err error
 	inst.DriverPID, err = ReadPIDFile(filepath.Join(instDir, filenames.PIDFile(*y.VMType)))
-- 
2.48.1

