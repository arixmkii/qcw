From b210c7dfe7b7f0afc6f5db6aec44163f57045a40 Mon Sep 17 00:00:00 2001
From: Arthur Sengileyev <arthur.sengileyev@gmail.com>
Date: Sat, 8 Mar 2025 23:30:25 +0200
Subject: [PATCH] Add WSL2 based tooling support on Windows hosts

Signed-off-by: Arthur Sengileyev <arthur.sengileyev@gmail.com>
---
 cmd/limactl/shell.go       | 27 +++++++++++++++------------
 pkg/hostagent/hostagent.go | 28 ++++++++++++++++------------
 pkg/hostagent/mount.go     |  5 ++++-
 pkg/ioutilx/ioutilx.go     | 10 ++++++++++
 pkg/sshutil/sshutil.go     |  6 ++++++
 pkg/store/instance.go      | 25 +++++++++++++++++++++++++
 6 files changed, 76 insertions(+), 25 deletions(-)

diff --git a/cmd/limactl/shell.go b/cmd/limactl/shell.go
index d7693085..74f352c4 100644
--- a/cmd/limactl/shell.go
+++ b/cmd/limactl/shell.go
@@ -237,18 +237,21 @@ func shellAction(cmd *cobra.Command, args []string) error {
 		return err
 	}
 	if runtime.GOOS == "windows" {
-		// Remove ControlMaster, ControlPath, and ControlPersist options,
-		// because Cygwin-based SSH clients do not support multiplexing when executing commands.
-		// References:
-		//   https://inbox.sourceware.org/cygwin/c98988a5-7e65-4282-b2a1-bb8e350d5fab@acm.org/T/
-		//   https://stackoverflow.com/questions/20959792/is-ssh-controlmaster-with-cygwin-on-windows-actually-possible
-		// By removing these options:
-		//   - Avoids execution failures when the control master is not yet available.
-		//   - Prevents error messages such as:
-		//     > mux_client_request_session: read from master failed: Connection reset by peer
-		//     > ControlSocket ....sock already exists, disabling multiplexing
-		// Only remove these options when writing the SSH config file and executing `limactl shell`, since multiplexing seems to work with port forwarding.
-		sshOpts = sshutil.SSHOptsRemovingControlPath(sshOpts)
+		localFS, err := ioutilx.IsLocalWindowsFS()
+		if err != nil || localFS {
+			// Remove ControlMaster, ControlPath, and ControlPersist options,
+			// because Cygwin-based SSH clients do not support multiplexing when executing commands.
+			// References:
+			//   https://inbox.sourceware.org/cygwin/c98988a5-7e65-4282-b2a1-bb8e350d5fab@acm.org/T/
+			//   https://stackoverflow.com/questions/20959792/is-ssh-controlmaster-with-cygwin-on-windows-actually-possible
+			// By removing these options:
+			//   - Avoids execution failures when the control master is not yet available.
+			//   - Prevents error messages such as:
+			//     > mux_client_request_session: read from master failed: Connection reset by peer
+			//     > ControlSocket ....sock already exists, disabling multiplexing
+			// Only remove these options when writing the SSH config file and executing `limactl shell`, since multiplexing seems to work with port forwarding.
+			sshOpts = sshutil.SSHOptsRemovingControlPath(sshOpts)
+		}
 	}
 	sshArgs := append([]string{}, sshExe.Args...)
 	sshArgs = append(sshArgs, sshutil.SSHArgsFromOpts(sshOpts)...)
diff --git a/pkg/hostagent/hostagent.go b/pkg/hostagent/hostagent.go
index 2c1f2e93..9e83d669 100644
--- a/pkg/hostagent/hostagent.go
+++ b/pkg/hostagent/hostagent.go
@@ -37,6 +37,7 @@ import (
 	"github.com/lima-vm/lima/v2/pkg/hostagent/dns"
 	"github.com/lima-vm/lima/v2/pkg/hostagent/events"
 	"github.com/lima-vm/lima/v2/pkg/instance/hostname"
+	"github.com/lima-vm/lima/v2/pkg/ioutilx"
 	"github.com/lima-vm/lima/v2/pkg/limatype"
 	"github.com/lima-vm/lima/v2/pkg/limatype/filenames"
 	"github.com/lima-vm/lima/v2/pkg/limayaml"
@@ -265,18 +266,21 @@ func writeSSHConfigFile(sshPath, instName, instDir, instSSHAddress string, sshLo
 # Modifications to this file will be lost on restarting the Lima instance.
 `)
 	if runtime.GOOS == "windows" {
-		// Remove ControlMaster, ControlPath, and ControlPersist options,
-		// because Cygwin-based SSH clients do not support multiplexing when executing commands.
-		// References:
-		//   https://inbox.sourceware.org/cygwin/c98988a5-7e65-4282-b2a1-bb8e350d5fab@acm.org/T/
-		//   https://stackoverflow.com/questions/20959792/is-ssh-controlmaster-with-cygwin-on-windows-actually-possible
-		// By removing these options:
-		//   - Avoids execution failures when the control master is not yet available.
-		//   - Prevents error messages such as:
-		//     > mux_client_request_session: read from master failed: Connection reset by peer
-		//     > ControlSocket ....sock already exists, disabling multiplexing
-		// Only remove these options when writing the SSH config file and executing `limactl shell`, since multiplexing seems to work with port forwarding.
-		sshOpts = sshutil.SSHOptsRemovingControlPath(sshOpts)
+		localFS, err := ioutilx.IsLocalWindowsFS()
+		if err != nil || localFS {
+			// Remove ControlMaster, ControlPath, and ControlPersist options,
+			// because Cygwin-based SSH clients do not support multiplexing when executing commands.
+			// References:
+			//   https://inbox.sourceware.org/cygwin/c98988a5-7e65-4282-b2a1-bb8e350d5fab@acm.org/T/
+			//   https://stackoverflow.com/questions/20959792/is-ssh-controlmaster-with-cygwin-on-windows-actually-possible
+			// By removing these options:
+			//   - Avoids execution failures when the control master is not yet available.
+			//   - Prevents error messages such as:
+			//     > mux_client_request_session: read from master failed: Connection reset by peer
+			//     > ControlSocket ....sock already exists, disabling multiplexing
+			// Only remove these options when writing the SSH config file and executing `limactl shell`, since multiplexing seems to work with port forwarding.
+			sshOpts = sshutil.SSHOptsRemovingControlPath(sshOpts)
+		}
 	}
 	if err := sshutil.Format(b, sshPath, instName, sshutil.FormatConfig,
 		append(sshOpts,
diff --git a/pkg/hostagent/mount.go b/pkg/hostagent/mount.go
index 1763e15b..04617df4 100644
--- a/pkg/hostagent/mount.go
+++ b/pkg/hostagent/mount.go
@@ -75,7 +75,10 @@ func (a *HostAgent) setupMount(ctx context.Context, m limatype.Mount) (*mount, e
 		// 1. unnecessary pollutes output with error on errors encountered (ssh will try to tolerate them with fallbacks);
 		// 2. these errors still imply additional coms over mux socket, which resulted sftp-server to fail more often statistically during test runs.
 		// It is reasonable to disable this on Windows if required feature is not fully operational.
-		rsf.SSHConfig.Persist = false
+		localFS, err := ioutilx.IsLocalWindowsFS()
+		if err != nil || localFS {
+			rsf.SSHConfig.Persist = false
+		}
 	}
 	if err := rsf.Prepare(); err != nil {
 		return nil, fmt.Errorf("failed to prepare reverse sshfs for %q on %q: %w", resolvedLocation, *m.MountPoint, err)
diff --git a/pkg/ioutilx/ioutilx.go b/pkg/ioutilx/ioutilx.go
index b2eb68fa..49f85071 100644
--- a/pkg/ioutilx/ioutilx.go
+++ b/pkg/ioutilx/ioutilx.go
@@ -67,3 +67,13 @@ func WindowsSubsystemPathForLinux(ctx context.Context, orig, distro string) (str
 	}
 	return strings.TrimSpace(string(out)), nil
 }
+
+func IsLocalWindowsFS() (bool, error) {
+	out, err := exec.Command("cygpath", "-w", "/").CombinedOutput()
+	if err != nil {
+		logrus.WithError(err).Errorf("failed to convert path to Windows, maybe not using Git ssh?")
+		return false, err
+	}
+	res := strings.TrimSpace(string(out))
+	return len(filepath.VolumeName(res)) == 2 && res != "\\\\", nil
+}
diff --git a/pkg/sshutil/sshutil.go b/pkg/sshutil/sshutil.go
index f2b12665..f1bee0e0 100644
--- a/pkg/sshutil/sshutil.go
+++ b/pkg/sshutil/sshutil.go
@@ -13,6 +13,7 @@ import (
 	"io/fs"
 	"os"
 	"os/exec"
+	"path"
 	"path/filepath"
 	"regexp"
 	"runtime"
@@ -341,6 +342,11 @@ func SSHOpts(ctx context.Context, sshExe SSHExe, instDir, username string, useDo
 		if err != nil {
 			return nil, err
 		}
+		localFS, err := ioutilx.IsLocalWindowsFS()
+		if err == nil && !localFS {
+			controlSock = strings.ReplaceAll(controlSock, "/", "_")
+			controlSock = path.Join("/var/opt/lima", strings.TrimPrefix(controlSock, "_mnt_"))
+		}
 		controlPath = fmt.Sprintf(`ControlPath='%s'`, controlSock)
 	}
 	opts = append(opts,
diff --git a/pkg/store/instance.go b/pkg/store/instance.go
index dc2f3319..73dacaa9 100644
--- a/pkg/store/instance.go
+++ b/pkg/store/instance.go
@@ -9,6 +9,7 @@ import (
 	"fmt"
 	"io"
 	"os"
+	"os/exec"
 	"path/filepath"
 	"runtime"
 	"strconv"
@@ -24,6 +25,7 @@ import (
 	"github.com/lima-vm/lima/v2/pkg/driverutil"
 	hostagentclient "github.com/lima-vm/lima/v2/pkg/hostagent/api/client"
 	"github.com/lima-vm/lima/v2/pkg/instance/hostname"
+	"github.com/lima-vm/lima/v2/pkg/ioutilx"
 	"github.com/lima-vm/lima/v2/pkg/limatype"
 	"github.com/lima-vm/lima/v2/pkg/limatype/dirnames"
 	"github.com/lima-vm/lima/v2/pkg/limatype/filenames"
@@ -60,6 +62,20 @@ func Inspect(ctx context.Context, instName string) (*limatype.Instance, error) {
 	inst.Arch = *y.Arch
 	inst.VMType = *y.VMType
 	inst.SSHAddress = "127.0.0.1"
+	if runtime.GOOS == "windows" && inst.VMType == limatype.QEMU {
+		localFS, err := ioutilx.IsLocalWindowsFS()
+		if err == nil && !localFS {
+			mode, err := call([]string{"wsl", "-d", "lima-infra", "wslinfo", "--networking-mode"})
+			if err == nil && mode == "nat" {
+				addr, err := call([]string{"wsl", "-d", "lima-infra", "bash", "-c", "ip route show | grep -i default | awk '{print \\$3}'"})
+				if err == nil {
+					inst.SSHAddress = addr
+				} else {
+					return nil, err
+				}
+			}
+		}
+	}
 	inst.SSHLocalPort = *y.SSH.LocalPort // maybe 0
 	inst.SSHConfigFile = filepath.Join(instDir, filenames.SSHConfig)
 	inst.HostAgentPID, err = ReadPIDFile(filepath.Join(instDir, filenames.HostAgentPID))
@@ -163,6 +179,15 @@ func inspectStatus(ctx context.Context, instDir string, inst *limatype.Instance,
 	inst.Status = status
 }
 
+func call(args []string) (string, error) {
+	cmd := exec.Command(args[0], args[1:]...)
+	out, err := cmd.Output()
+	if err != nil {
+		return "", err
+	}
+	return strings.TrimSpace(string(out)), nil
+}
+
 func inspectStatusWithPIDFiles(instDir string, inst *limatype.Instance, y *limatype.LimaYAML) {
 	var err error
 	inst.DriverPID, err = ReadPIDFile(filepath.Join(instDir, filenames.PIDFile(*y.VMType)))
-- 
2.51.0

