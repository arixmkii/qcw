From 86f118433be486fc36b29969a37df34421e04471 Mon Sep 17 00:00:00 2001
From: Arthur Sengileyev <arthur.sengileyev@gmail.com>
Date: Wed, 22 Jan 2025 17:24:01 +0200
Subject: [PATCH 1/3] Add QEMU driver support on Windows hosts

Signed-off-by: Arthur Sengileyev <arthur.sengileyev@gmail.com>
---
 Makefile                           | 17 +++++++++++++
 cmd/limactl/main.go                | 14 ++++++++++
 cmd/limactl/shell.go               |  3 ++-
 contrib/bundle-wsl/go-wsllinks.exe |  0
 contrib/bundle-wsl/sftp-server.ini |  1 +
 contrib/bundle-wsl/wsllinks.ini    |  2 ++
 hack/common.inc.sh                 |  2 +-
 hack/test-mount-home.sh            |  5 ++--
 hack/test-port-forwarding.pl       | 12 ++++++++-
 hack/test-templates.sh             | 41 ++++++++++++++++++++++--------
 pkg/cidata/cidata.go               | 11 +++++++-
 pkg/hostagent/hostagent.go         |  7 ++++-
 pkg/hostagent/mount.go             | 23 ++++++++++++++---
 pkg/ioutilx/ioutilx.go             |  3 ++-
 pkg/osutil/user.go                 |  2 +-
 pkg/qemu/qemu.go                   |  2 +-
 pkg/sshutil/sshutil.go             | 19 +++++++-------
 templates/default.yaml             |  2 +-
 18 files changed, 132 insertions(+), 34 deletions(-)
 create mode 100644 contrib/bundle-wsl/go-wsllinks.exe
 create mode 100644 contrib/bundle-wsl/sftp-server.ini
 create mode 100644 contrib/bundle-wsl/wsllinks.ini

diff --git a/Makefile b/Makefile
index be201c71..2c5110bb 100644
--- a/Makefile
+++ b/Makefile
@@ -568,6 +568,23 @@ artifacts-misc: | _artifacts
 
 MKDIR_TARGETS += _artifacts
 
+.PHONY: add-bundles
+add-bundles: add-bundle-wsl
+
+add-bundle-wsl: _output/bin/bundle-wsl/wsllinks.ini _output/bin/bundle-wsl/sftp-server.ini \
+	_output/bin/bundle-wsl/cygpath.exe _output/bin/bundle-wsl/id.exe _output/bin/bundle-wsl/realpath.exe\
+	_output/bin/bundle-wsl/sftp-server.exe _output/bin/bundle-wsl/ssh.exe _output/bin/bundle-wsl/ssh-keygen.exe \
+	_output/bin/bundle-wsl/gzip.exe _output/bin/bundle-wsl/bzip2.exe _output/bin/bundle-wsl/xz.exe \
+	_output/bin/bundle-wsl/zstd.exe _output/bin/bundle-wsl/scp.exe
+
+_output/bin/bundle-wsl/%.ini: contrib/bundle-wsl/%.ini | _output/bin/bundle-wsl
+	cp -a $< $@
+
+_output/bin/bundle-wsl/%.exe:
+	cp -a contrib/bundle-wsl/go-wsllinks.exe $@
+
+MKDIR_TARGETS += _output/bin/bundle-wsl
+
 ################################################################################
 # This target must be placed after any changes to the `MKDIR_TARGETS` variable.
 # It seems that variable expansion in Makefile targets is not done recursively.
diff --git a/cmd/limactl/main.go b/cmd/limactl/main.go
index 259f622a..4369387f 100644
--- a/cmd/limactl/main.go
+++ b/cmd/limactl/main.go
@@ -25,6 +25,20 @@ const (
 )
 
 func main() {
+	if runtime.GOOS == "windows" {
+		binary, e := os.Executable()
+		if e == nil {
+			binaryDir := filepath.Dir(binary)
+			extrasDir := filepath.Join(binaryDir, "bundle-wsl")
+			p := os.Getenv("PATH")
+			e = os.Setenv("PATH", extrasDir+string(filepath.ListSeparator)+p)
+			if e != nil {
+				logrus.Warning("Can't add extras to PATH, relying fully on system PATH")
+			}
+		} else {
+			logrus.Warning("Can't get binary location, relying fully on system PATH")
+		}
+	}
 	if err := newApp().Execute(); err != nil {
 		handleExitCoder(err)
 		logrus.Fatal(err)
diff --git a/cmd/limactl/shell.go b/cmd/limactl/shell.go
index c4611a0b..37f4f1e7 100644
--- a/cmd/limactl/shell.go
+++ b/cmd/limactl/shell.go
@@ -5,6 +5,7 @@ import (
 	"fmt"
 	"os"
 	"os/exec"
+	"runtime"
 	"strconv"
 	"strings"
 
@@ -105,7 +106,7 @@ func shellAction(cmd *cobra.Command, args []string) error {
 		logrus.Debug("the host home does not seem mounted, so the guest shell will have a different cwd")
 	}
 
-	if changeDirCmd == "" {
+	if runtime.GOOS == "windows" || changeDirCmd == "" {
 		changeDirCmd = "false"
 	}
 	logrus.Debugf("changeDirCmd=%q", changeDirCmd)
diff --git a/contrib/bundle-wsl/go-wsllinks.exe b/contrib/bundle-wsl/go-wsllinks.exe
new file mode 100644
index 00000000..e69de29b
diff --git a/contrib/bundle-wsl/sftp-server.ini b/contrib/bundle-wsl/sftp-server.ini
new file mode 100644
index 00000000..4ad96ac0
--- /dev/null
+++ b/contrib/bundle-wsl/sftp-server.ini
@@ -0,0 +1 @@
+binary = /usr/lib/ssh/sftp-server
diff --git a/contrib/bundle-wsl/wsllinks.ini b/contrib/bundle-wsl/wsllinks.ini
new file mode 100644
index 00000000..6f274505
--- /dev/null
+++ b/contrib/bundle-wsl/wsllinks.ini
@@ -0,0 +1,2 @@
+distro = lima-infra
+user = lima
diff --git a/hack/common.inc.sh b/hack/common.inc.sh
index 1e90ff8e..d4d408b7 100644
--- a/hack/common.inc.sh
+++ b/hack/common.inc.sh
@@ -23,7 +23,7 @@ if [[ ${BASH_VERSINFO:-0} -lt 4 ]]; then
 	exit 1
 fi
 
-: "${LIMA_HOME:=$HOME/.lima}"
+: "${LIMA_HOME:=${HOME_SRC:-$HOME}/.lima}"
 _IPERF3=iperf3
 # iperf3-darwin does some magic on macOS to avoid "No route on host" on macOS 15
 # https://github.com/lima-vm/socket_vmnet/issues/85
diff --git a/hack/test-mount-home.sh b/hack/test-mount-home.sh
index dd8e1afa..5e0c2fed 100755
--- a/hack/test-mount-home.sh
+++ b/hack/test-mount-home.sh
@@ -11,14 +11,15 @@ if [ "$#" -ne 1 ]; then
 fi
 
 NAME="$1"
-hometmp="$HOME/lima-test-tmp"
+hometmp="${HOME_SRC:-$HOME}/lima-test-tmp"
+hometmpdst="${HOME_DST:-$HOME}/lima-test-tmp"
 INFO "Testing home access (\"$hometmp\")"
 rm -rf "$hometmp"
 mkdir -p "$hometmp"
 defer "rm -rf \"$hometmp\""
 echo "random-content-${RANDOM}" >"$hometmp/random"
 expected="$(cat "$hometmp/random")"
-got="$(limactl shell "$NAME" cat "$hometmp/random")"
+got="$(limactl shell "$NAME" cat "$hometmpdst/random")"
 INFO "$hometmp/random: expected=${expected}, got=${got}"
 if [ "$got" != "$expected" ]; then
 	ERROR "Home directory is not shared?"
diff --git a/hack/test-port-forwarding.pl b/hack/test-port-forwarding.pl
index 3a41ce1e..a7649f6c 100755
--- a/hack/test-port-forwarding.pl
+++ b/hack/test-port-forwarding.pl
@@ -33,6 +33,11 @@ if ($ipv4 eq "127.0.0.1" && $Config{osname} eq "darwin") {
     chomp $ipv4;
 }
 
+if ($Config{osname} eq "cygwin" && "$ENV{LIMA_SSH_PORT_FORWARDER}" ne "false") {
+  $ipv4 = qx(wsl -d lima-infra ip -4 -o addr show eth0 | awk '{print \$4}' | cut -d/ -f1);
+  chomp $ipv4;
+}
+
 # If $instance is a filename, add our portForwards to it to enable testing
 if (-f $instance) {
     open(my $fh, "+< $instance") or die "Can't open $instance for read/write: $!";
@@ -100,6 +105,10 @@ while (<DATA>) {
         printf "ðŸš§ Not supported on $Config{osname}: # $_\n";
         next;
     }
+    if ($test{mode} eq "forward" && $test{host_ip} eq "::" && $Config{osname} eq "cygwin" && "$ENV{LIMA_SSH_PORT_FORWARDER}" ne "false") {
+        printf "ðŸš§ Not supported on $Config{osname}: # $_\n";
+        next;
+    }
     $test{host_ip} ||= "127.0.0.1";
     $test{host_port} ||= $test{guest_port};
 
@@ -129,7 +138,8 @@ EOF
 sleep 5;
 
 # Record current log size, so we can skip prior output
-$ENV{LIMA_HOME} ||= "$ENV{HOME}/.lima";
+$ENV{HOME_SRC} ||= "$ENV{HOME}";
+$ENV{LIMA_HOME} ||= "$ENV{HOME_SRC}/.lima";
 my $ha_log = "$ENV{LIMA_HOME}/$instance/ha.stderr.log";
 my $ha_log_size = -s $ha_log or die;
 
diff --git a/hack/test-templates.sh b/hack/test-templates.sh
index 26e064b5..ee8b3d91 100755
--- a/hack/test-templates.sh
+++ b/hack/test-templates.sh
@@ -1,6 +1,8 @@
 #!/usr/bin/env bash
 set -eu -o pipefail
 
+export MSYS2_ARG_CONV_EXCL='*'
+
 scriptdir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
 # shellcheck source=common.inc.sh
 source "${scriptdir}/common.inc.sh"
@@ -13,6 +15,9 @@ fi
 FILE="$1"
 NAME="$(basename -s .yaml "$FILE")"
 
+HOME_SRC=${HOME_SRC:-$HOME}
+HOME_DST=${HOME_DST:-$HOME}
+
 INFO "Validating \"$FILE\""
 limactl validate "$FILE"
 
@@ -93,7 +98,7 @@ esac
 limactl rm -f "${NAME}-tmp"
 
 if [[ -n ${CHECKS["port-forwards"]} ]]; then
-	tmpconfig="$HOME/lima-config-tmp"
+	tmpconfig="$HOME_SRC/lima-config-tmp"
 	mkdir -p "${tmpconfig}"
 	defer "rm -rf \"$tmpconfig\""
 	tmpfile="${tmpconfig}/${NAME}.yaml"
@@ -101,17 +106,21 @@ if [[ -n ${CHECKS["port-forwards"]} ]]; then
 	FILE="${tmpfile}"
 	INFO "Setup port forwarding rules for testing in \"${FILE}\""
 	"${scriptdir}/test-port-forwarding.pl" "${FILE}"
-	limactl validate "$FILE"
+	if [ "$(uname -o)" = "Msys" ]; then
+		limactl validate $(cygpath -w "$FILE")
+	else
+		limactl validate "$FILE"
+	fi
 fi
 
 function diagnose() {
 	NAME="$1"
 	set -x +e
-	tail "$HOME/.lima/${NAME}"/*.log
+	tail "$HOME_SRC/.lima/${NAME}"/*.log
 	limactl shell "$NAME" systemctl --no-pager status
 	limactl shell "$NAME" systemctl --no-pager
 	mkdir -p failure-logs
-	cp -pf "$HOME/.lima/${NAME}"/*.log failure-logs/
+	cp -pf "$HOME_SRC/.lima/${NAME}"/*.log failure-logs/
 	limactl shell "$NAME" sudo cat /var/log/cloud-init-output.log | tee failure-logs/cloud-init-output.log
 	set +x -e
 }
@@ -130,7 +139,11 @@ fi
 
 set -x
 # shellcheck disable=SC2086
-"${LIMACTL_CREATE[@]}" ${LIMACTL_CREATE_ARGS} "$FILE"
+if [ "$(uname -o)" = "Msys" ]; then
+	"${LIMACTL_CREATE[@]}" ${LIMACTL_CREATE_ARGS} $(cygpath -w "$FILE")
+else
+	"${LIMACTL_CREATE[@]}" ${LIMACTL_CREATE_ARGS} "$FILE"
+fi
 set +x
 
 if [[ -n ${CHECKS["mount-path-with-spaces"]} ]]; then
@@ -152,7 +165,7 @@ limactl shell "$NAME" cat /etc/os-release
 set +x
 
 INFO "Testing that host home is not wiped out"
-[ -e "$HOME/.lima" ]
+[ -e "$HOME_SRC/.lima" ]
 
 if [[ -n ${CHECKS["mount-path-with-spaces"]} ]]; then
 	INFO 'Testing that "/tmp/lima test dir with spaces" is not wiped out'
@@ -196,7 +209,9 @@ tmpdir="$(mktemp -d "${TMPDIR:-/tmp}"/lima-test-templates.XXXXXX)"
 defer "rm -rf \"$tmpdir\""
 tmpfile="$tmpdir/lima-hostname"
 rm -f "$tmpfile"
-limactl cp "$NAME":/etc/hostname "$tmpfile"
+wintmpdir="$(cygpath -w / | sed 's_\\_/_g' | sed 's/.$//')"
+mnttmpdir="$(wsl -d lima-infra wslpath $wintmpdir)"
+limactl cp "$NAME":/etc/hostname "$mnttmpdir$tmpfile"
 expected="$(limactl shell "$NAME" cat /etc/hostname)"
 got="$(cat "$tmpfile")"
 INFO "/etc/hostname: expected=${expected}, got=${got}"
@@ -249,7 +264,8 @@ if [[ -n ${CHECKS["container-engine"]} ]]; then
 	limactl shell "$NAME" $CONTAINER_ENGINE rm -f nginx
 	set +x
 	if [[ -n ${CHECKS["mount-home"]} ]]; then
-		hometmp="$HOME/lima-container-engine-test-tmp"
+		hometmp="$HOME_SRC/lima-container-engine-test-tmp"
+		hometmpdst="$HOME_DST/lima-container-engine-test-tmp"
 		# test for https://github.com/lima-vm/lima/issues/187
 		INFO "Testing home bind mount (\"$hometmp\")"
 		rm -rf "$hometmp"
@@ -259,7 +275,7 @@ if [[ -n ${CHECKS["container-engine"]} ]]; then
 		limactl shell "$NAME" $CONTAINER_ENGINE pull --quiet ${alpine_image}
 		echo "random-content-${RANDOM}" >"$hometmp/random"
 		expected="$(cat "$hometmp/random")"
-		got="$(limactl shell "$NAME" $CONTAINER_ENGINE run --rm -v "$hometmp/random":/mnt/foo ${alpine_image} cat /mnt/foo)"
+		got="$(limactl shell "$NAME" $CONTAINER_ENGINE run --rm -v "$hometmpdst/random":/mnt/foo ${alpine_image} cat /mnt/foo)"
 		INFO "$hometmp/random: expected=${expected}, got=${got}"
 		if [ "$got" != "$expected" ]; then
 			ERROR "Home directory is not shared?"
@@ -294,6 +310,9 @@ if [[ -n ${CHECKS["port-forwards"]} ]]; then
 		else
 			hostip=$(perl -MSocket -MSys::Hostname -E 'say inet_ntoa(scalar gethostbyname(hostname()))')
 		fi
+		if [[ "$(uname -o)" = "Msys" && "${LIMA_SSH_PORT_FORWARDER-true}" != "false" ]]; then
+			hostip=$(wsl -d lima-infra ip -4 -o addr show eth0 | awk '{print $4}' | cut -d/ -f1)
+		fi
 		if [ -n "${hostip}" ]; then
 			sudo=""
 			if [[ ${NAME} == "alpine"* ]]; then
@@ -360,7 +379,7 @@ if [[ -n ${CHECKS["restart"]} ]]; then
 	fi
 
 	INFO "Stopping \"$NAME\""
-	limactl stop "$NAME"
+	limactl stop "$NAME" || true
 	sleep 3
 
 	if [[ -n ${CHECKS["disk"]} ]]; then
@@ -474,7 +493,7 @@ if [[ $NAME == "fedora" && "$(limactl ls --json "$NAME" | jq -r .vmType)" == "vz
 fi
 
 INFO "Stopping \"$NAME\""
-limactl stop "$NAME"
+limactl stop "$NAME" || true
 sleep 3
 
 INFO "Deleting \"$NAME\""
diff --git a/pkg/cidata/cidata.go b/pkg/cidata/cidata.go
index abd2ccf4..77122e8a 100644
--- a/pkg/cidata/cidata.go
+++ b/pkg/cidata/cidata.go
@@ -10,6 +10,7 @@ import (
 	"os"
 	"path"
 	"path/filepath"
+	"runtime"
 	"slices"
 	"strings"
 	"time"
@@ -17,6 +18,7 @@ import (
 	"github.com/docker/go-units"
 	"github.com/lima-vm/lima/pkg/debugutil"
 	"github.com/lima-vm/lima/pkg/identifierutil"
+	"github.com/lima-vm/lima/pkg/ioutilx"
 	"github.com/lima-vm/lima/pkg/iso9660util"
 	"github.com/lima-vm/lima/pkg/limayaml"
 	"github.com/lima-vm/lima/pkg/localpathutil"
@@ -201,10 +203,17 @@ func templateArgs(bootScripts bool, instDir, name string, instConfig *limayaml.L
 		if err != nil {
 			return nil, err
 		}
-		mountPoint, err := localpathutil.Expand(*f.MountPoint)
+
+		mountPoint := *f.MountPoint
+		if !path.IsAbs(mountPoint) {
+			mountPoint, err = localpathutil.Expand(mountPoint)
+		}
 		if err != nil {
 			return nil, err
 		}
+		if runtime.GOOS == "windows" && !path.IsAbs(mountPoint) {
+			mountPoint = ioutilx.CanonicalWindowsPath(mountPoint)
+		}
 		options := "defaults"
 		switch fstype {
 		case "9p", "virtiofs":
diff --git a/pkg/hostagent/hostagent.go b/pkg/hostagent/hostagent.go
index 396401a4..212f0c35 100644
--- a/pkg/hostagent/hostagent.go
+++ b/pkg/hostagent/hostagent.go
@@ -11,6 +11,7 @@ import (
 	"os"
 	"os/exec"
 	"path/filepath"
+	"runtime"
 	"strconv"
 	"strings"
 	"sync"
@@ -132,7 +133,11 @@ func New(instName string, stdout io.Writer, signalCh chan os.Signal, opts ...Opt
 		vSockPort = port
 	} else if *inst.Config.VMType == limayaml.QEMU {
 		// virtserialport doesn't seem to work reliably: https://github.com/lima-vm/lima/issues/2064
-		virtioPort = "" // filenames.VirtioPort
+		if runtime.GOOS != "windows" {
+			virtioPort = "" // filenames.VirtioPort
+		} else {
+			virtioPort = filenames.VirtioPort
+		}
 	}
 
 	if err := cidata.GenerateCloudConfig(inst.Dir, instName, inst.Config); err != nil {
diff --git a/pkg/hostagent/mount.go b/pkg/hostagent/mount.go
index 646dc5d4..9a59f25c 100644
--- a/pkg/hostagent/mount.go
+++ b/pkg/hostagent/mount.go
@@ -4,7 +4,11 @@ import (
 	"errors"
 	"fmt"
 	"os"
+	"os/exec"
+	"path"
+	"runtime"
 
+	"github.com/lima-vm/lima/pkg/ioutilx"
 	"github.com/lima-vm/lima/pkg/limayaml"
 	"github.com/lima-vm/lima/pkg/localpathutil"
 	"github.com/lima-vm/sshocker/pkg/reversesshfs"
@@ -36,13 +40,22 @@ func (a *HostAgent) setupMount(m limayaml.Mount) (*mount, error) {
 	if err != nil {
 		return nil, err
 	}
+	if err := os.MkdirAll(location, 0o755); err != nil {
+		return nil, err
+	}
+	if runtime.GOOS == "windows" && !path.IsAbs(location) {
+		location = ioutilx.CanonicalWindowsPath(location)
+	}
 
-	mountPoint, err := localpathutil.Expand(*m.MountPoint)
+	mountPoint := *m.MountPoint
+	if !path.IsAbs(mountPoint) {
+		mountPoint, err = localpathutil.Expand(mountPoint)
+	}
 	if err != nil {
 		return nil, err
 	}
-	if err := os.MkdirAll(location, 0o755); err != nil {
-		return nil, err
+	if runtime.GOOS == "windows" && !path.IsAbs(mountPoint) {
+		mountPoint = ioutilx.CanonicalWindowsPath(mountPoint)
 	}
 	// NOTE: allow_other requires "user_allow_other" in /etc/fuse.conf
 	sshfsOptions := "allow_other"
@@ -64,6 +77,10 @@ func (a *HostAgent) setupMount(m limayaml.Mount) (*mount, error) {
 		Readonly:            !(*m.Writable),
 		SSHFSAdditionalArgs: []string{"-o", sshfsOptions},
 	}
+	serverPath, err := exec.LookPath("sftp-server")
+	if err == nil {
+		rsf.OpensshSftpServerBinary = serverPath
+	}
 	if err := rsf.Prepare(); err != nil {
 		return nil, fmt.Errorf("failed to prepare reverse sshfs for %q on %q: %w", location, mountPoint, err)
 	}
diff --git a/pkg/ioutilx/ioutilx.go b/pkg/ioutilx/ioutilx.go
index efee8203..4b52f24a 100644
--- a/pkg/ioutilx/ioutilx.go
+++ b/pkg/ioutilx/ioutilx.go
@@ -5,6 +5,7 @@ import (
 	"fmt"
 	"io"
 	"os/exec"
+	"path/filepath"
 	"strings"
 
 	"github.com/sirupsen/logrus"
@@ -47,7 +48,7 @@ func FromUTF16leToString(r io.Reader) (string, error) {
 
 func CanonicalWindowsPath(orig string) string {
 	newPath := orig
-	out, err := exec.Command("cygpath", "-m", orig).CombinedOutput()
+	out, err := exec.Command("cygpath", filepath.ToSlash(orig)).CombinedOutput()
 	if err != nil {
 		logrus.WithError(err).Errorf("failed to convert path to mingw, maybe not using Git ssh?")
 	} else {
diff --git a/pkg/osutil/user.go b/pkg/osutil/user.go
index d1883c59..240f040b 100644
--- a/pkg/osutil/user.go
+++ b/pkg/osutil/user.go
@@ -141,7 +141,7 @@ func LimaUser(limaVersion string, warn bool) *user.User {
 				warnings = append(warnings, warning)
 				limaUser.Gid = formatUidGid(gid)
 			}
-			home, err := call([]string{"cygpath", limaUser.HomeDir})
+			home, err := call([]string{"realpath", "~"})
 			if err != nil {
 				logrus.Debug(err)
 			}
diff --git a/pkg/qemu/qemu.go b/pkg/qemu/qemu.go
index be7b61ae..bddc708e 100644
--- a/pkg/qemu/qemu.go
+++ b/pkg/qemu/qemu.go
@@ -1044,7 +1044,7 @@ func qemuEdk2Arch(arch limayaml.Arch) string {
 }
 
 func Exe(arch limayaml.Arch) (exe string, args []string, err error) {
-	exeBase := "qemu-system-" + qemuArch(arch)
+	exeBase := "qemu-system-" + qemuArch(arch) + "w"
 	envK := "QEMU_SYSTEM_" + strings.ToUpper(qemuArch(arch))
 	if envV := os.Getenv(envK); envV != "" {
 		ss, err := shellwords.Parse(envV)
diff --git a/pkg/sshutil/sshutil.go b/pkg/sshutil/sshutil.go
index 563bc5ed..37908acb 100644
--- a/pkg/sshutil/sshutil.go
+++ b/pkg/sshutil/sshutil.go
@@ -9,6 +9,7 @@ import (
 	"io/fs"
 	"os"
 	"os/exec"
+	"path"
 	"path/filepath"
 	"regexp"
 	"runtime"
@@ -95,8 +96,12 @@ func DefaultPubKeys(loadDotSSH bool) ([]PubKey, error) {
 		}
 		if err := lockutil.WithDirLock(configDir, func() error {
 			// no passphrase, no user@host comment
+			privPath := filepath.Join(configDir, filenames.UserPrivateKey)
+			if runtime.GOOS == "windows" {
+				privPath = ioutilx.CanonicalWindowsPath(privPath)
+			}
 			keygenCmd := exec.Command("ssh-keygen", "-t", "ed25519", "-q", "-N", "",
-				"-C", "lima", "-f", filepath.Join(configDir, filenames.UserPrivateKey))
+				"-C", "lima", "-f", privPath)
 			logrus.Debugf("executing %v", keygenCmd.Args)
 			if out, err := keygenCmd.CombinedOutput(); err != nil {
 				return fmt.Errorf("failed to run %v: %q: %w", keygenCmd.Args, string(out), err)
@@ -177,7 +182,7 @@ func CommonOpts(sshPath string, useDotSSH bool) ([]string, error) {
 
 	// Append all private keys corresponding to ~/.ssh/*.pub to keep old instances working
 	// that had been created before lima started using an internal identity.
-	if useDotSSH {
+	if runtime.GOOS != "windows" && useDotSSH {
 		homeDir, err := os.UserHomeDir()
 		if err != nil {
 			return nil, err
@@ -204,11 +209,7 @@ func CommonOpts(sshPath string, useDotSSH bool) ([]string, error) {
 				// Fail on permission-related and other path errors
 				return nil, err
 			}
-			if runtime.GOOS == "windows" {
-				opts = append(opts, fmt.Sprintf(`IdentityFile='%s'`, privateKeyPath))
-			} else {
-				opts = append(opts, fmt.Sprintf(`IdentityFile="%s"`, privateKeyPath))
-			}
+			opts = append(opts, fmt.Sprintf(`IdentityFile="%s"`, privateKeyPath))
 		}
 	}
 
@@ -265,8 +266,8 @@ func SSHOpts(sshPath, instDir, username string, useDotSSH, forwardAgent, forward
 	}
 	controlPath := fmt.Sprintf(`ControlPath="%s"`, controlSock)
 	if runtime.GOOS == "windows" {
-		controlSock = ioutilx.CanonicalWindowsPath(controlSock)
-		controlPath = fmt.Sprintf(`ControlPath='%s'`, controlSock)
+		controlSock = strings.ReplaceAll(ioutilx.CanonicalWindowsPath(controlSock), "/", "_")
+		controlPath = fmt.Sprintf(`ControlPath='%s'`, path.Join("/var/opt/lima", strings.TrimPrefix(controlSock, "_mnt_")))
 	}
 	opts = append(opts,
 		fmt.Sprintf("User=%s", username), // guest and host have the same username, but we should specify the username explicitly (#85)
diff --git a/templates/default.yaml b/templates/default.yaml
index 471c9661..18ca2fe7 100644
--- a/templates/default.yaml
+++ b/templates/default.yaml
@@ -99,7 +99,7 @@ mounts:
     # See https://www.kernel.org/doc/Documentation/filesystems/9p.txt
     # ðŸŸ¢ Builtin default: "fscache" for non-writable mounts, "mmap" for writable mounts
     cache: null
-- location: "/tmp/lima"
+- location: "C:\\tmp\\lima"
   # ðŸŸ¢ Builtin default: false
   # ðŸ”µ This file: true (only for "/tmp/lima")
   writable: true
-- 
2.48.1

