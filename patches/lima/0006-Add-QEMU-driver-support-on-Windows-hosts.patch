From 8f560b7bf52788b6fa696b5bc6a7455ed6de74ee Mon Sep 17 00:00:00 2001
From: Arthur Sengileyev <arthur.sengileyev@gmail.com>
Date: Thu, 6 Mar 2025 22:02:13 +0200
Subject: [PATCH 1/4] Add QEMU driver support on Windows hosts

---
 Makefile                           | 40 ++++++++++++++++++++++++++++++
 contrib/bundle-git/sftp-server.ini |  1 +
 contrib/bundle-git/wsllinks.ini    |  2 ++
 contrib/bundle-wsl/sftp-server.ini |  1 +
 contrib/bundle-wsl/ssh-keygen.ini  |  1 +
 contrib/bundle-wsl/wsllinks.ini    |  2 ++
 contrib/go-wsllinks.exe            |  0
 hack/test-port-forwarding.pl       | 33 ++++++++++++++++++++++--
 hack/test-templates.sh             |  3 +++
 pkg/hostagent/hostagent.go         |  7 +++++-
 pkg/qemu/qemu.go                   |  2 +-
 11 files changed, 88 insertions(+), 4 deletions(-)
 create mode 100644 contrib/bundle-git/sftp-server.ini
 create mode 100644 contrib/bundle-git/wsllinks.ini
 create mode 100644 contrib/bundle-wsl/sftp-server.ini
 create mode 100644 contrib/bundle-wsl/ssh-keygen.ini
 create mode 100644 contrib/bundle-wsl/wsllinks.ini
 create mode 100644 contrib/go-wsllinks.exe

diff --git a/Makefile b/Makefile
index ef472651..6108c3a5 100644
--- a/Makefile
+++ b/Makefile
@@ -570,6 +570,46 @@ artifacts-misc: | _artifacts
 
 MKDIR_TARGETS += _artifacts
 
+.PHONY: add-bundles
+add-bundles: add-bundle-wsl add-bundle-git
+
+add-bundle-wsl: _output/bin/bundle-wsl/wsllinks.ini _output/bin/bundle-wsl/sftp-server.ini _output/bin/bundle-wsl/ssh-keygen.ini\
+	_output/bin/bundle-wsl/bzip2.exe\
+	_output/bin/bundle-wsl/cygpath.exe\
+	_output/bin/bundle-wsl/gzip.exe\
+	_output/bin/bundle-wsl/id.exe\
+	_output/bin/bundle-wsl/scp.exe\
+	_output/bin/bundle-wsl/sftp-server.exe\
+	_output/bin/bundle-wsl/ssh.exe\
+	_output/bin/bundle-wsl/ssh-keygen.exe\
+	_output/bin/bundle-wsl/xz.exe\
+	_output/bin/bundle-wsl/zstd.exe
+
+add-bundle-git: _output/bin/bundle-git/wsllinks.ini _output/bin/bundle-git/sftp-server.ini\
+	_output/bin/bundle-git/bzip2.exe\
+	_output/bin/bundle-git/cygpath.exe\
+	_output/bin/bundle-git/gzip.exe\
+	_output/bin/bundle-git/id.exe\
+	_output/bin/bundle-git/scp.exe\
+	_output/bin/bundle-git/sftp-server.exe\
+	_output/bin/bundle-git/ssh.exe\
+	_output/bin/bundle-git/ssh-keygen.exe
+
+_output/bin/bundle-wsl/%.ini: contrib/bundle-wsl/%.ini | _output/bin/bundle-wsl
+	cp -a $< $@
+
+_output/bin/bundle-git/%.ini: contrib/bundle-git/%.ini | _output/bin/bundle-git
+	cp -a $< $@
+
+_output/bin/bundle-wsl/%.exe:
+	cp -a contrib/go-wsllinks.exe $@
+
+_output/bin/bundle-git/%.exe:
+	cp -a contrib/go-wsllinks.exe $@
+
+MKDIR_TARGETS += _output/bin/bundle-wsl
+MKDIR_TARGETS += _output/bin/bundle-git
+
 ################################################################################
 # This target must be placed after any changes to the `MKDIR_TARGETS` variable.
 # It seems that variable expansion in Makefile targets is not done recursively.
diff --git a/contrib/bundle-git/sftp-server.ini b/contrib/bundle-git/sftp-server.ini
new file mode 100644
index 00000000..71e90810
--- /dev/null
+++ b/contrib/bundle-git/sftp-server.ini
@@ -0,0 +1 @@
+baseDir = C:\Program Files\Git\usr\lib\ssh
diff --git a/contrib/bundle-git/wsllinks.ini b/contrib/bundle-git/wsllinks.ini
new file mode 100644
index 00000000..f55d7879
--- /dev/null
+++ b/contrib/bundle-git/wsllinks.ini
@@ -0,0 +1,2 @@
+mode = direct
+baseDir = C:\Program Files\Git\usr\bin
diff --git a/contrib/bundle-wsl/sftp-server.ini b/contrib/bundle-wsl/sftp-server.ini
new file mode 100644
index 00000000..47d2814a
--- /dev/null
+++ b/contrib/bundle-wsl/sftp-server.ini
@@ -0,0 +1 @@
+binary = /usr/lib/ssh/sftp-server
diff --git a/contrib/bundle-wsl/ssh-keygen.ini b/contrib/bundle-wsl/ssh-keygen.ini
new file mode 100644
index 00000000..53aa2b99
--- /dev/null
+++ b/contrib/bundle-wsl/ssh-keygen.ini
@@ -0,0 +1 @@
+shellType = standard
diff --git a/contrib/bundle-wsl/wsllinks.ini b/contrib/bundle-wsl/wsllinks.ini
new file mode 100644
index 00000000..60b0c8e8
--- /dev/null
+++ b/contrib/bundle-wsl/wsllinks.ini
@@ -0,0 +1,2 @@
+distro = lima-infra
+user = lima
diff --git a/contrib/go-wsllinks.exe b/contrib/go-wsllinks.exe
new file mode 100644
index 00000000..e69de29b
diff --git a/hack/test-port-forwarding.pl b/hack/test-port-forwarding.pl
index b812060c..2ca38472 100755
--- a/hack/test-port-forwarding.pl
+++ b/hack/test-port-forwarding.pl
@@ -27,12 +27,19 @@ my $addr = scalar gethostbyname(hostname());
 my $ipv4 = length $addr ? inet_ntoa($addr) : "127.0.0.1";
 my $ipv6 = ""; # todo
 
+$ENV{LIMA_SSH_PORT_FORWARDER} ||= "true";
+
 # macOS GitHub runners seem to use "localhost" as the hostname
 if ($ipv4 eq "127.0.0.1" && $Config{osname} eq "darwin") {
     $ipv4 = qx(system_profiler SPNetworkDataType -json | jq -r 'first(.SPNetworkDataType[] | select(.ip_address) | .ip_address) | first');
     chomp $ipv4;
 }
 
+if ($Config{osname} eq "cygwin" && "$ENV{LIMA_SSH_PORT_FORWARDER}" ne "false") {
+  $ipv4 = qx(wsl -d lima-infra ip -4 -o addr show eth0 | awk '{print \$4}' | cut -d/ -f1);
+  chomp $ipv4;
+}
+
 # If $instance is a filename, add our portForwards to it to enable testing
 if (-f $instance) {
     open(my $fh, "+< $instance") or die "Can't open $instance for read/write: $!";
@@ -96,12 +103,34 @@ while (<DATA>) {
     /^(forward|ignore):\s+([0-9.:]+)\s+(\d+)(?:\s+â†’)?(?:\s+([0-9.:]+)(?:\s+(\d+))?)?/;
     die "Cannot parse test '$_'" unless $1;
     my %test; @test{qw(mode guest_ip guest_port host_ip host_port)} = ($1, $2, $3, $4, $5);
+
+    $test{host_ip} ||= "127.0.0.1";
+    $test{host_port} ||= $test{guest_port};
+
     if ($test{mode} eq "forward" && $test{host_port} < 1024 && $Config{osname} ne "darwin") {
         printf "ðŸš§ Not supported on $Config{osname}: # $_\n";
         next;
     }
-    $test{host_ip} ||= "127.0.0.1";
-    $test{host_port} ||= $test{guest_port};
+    if ($test{mode} eq "forward" && $test{host_ip} eq "::" && $Config{osname} eq "cygwin" && "$ENV{LIMA_SSH_PORT_FORWARDER}" ne "false") {
+        printf "ðŸš§ Not supported on $Config{osname}: # $_\n";
+        next;
+    }
+    if ($test{guest_ip} eq "192.168.5.15" && $instance eq "wsl2") {
+        printf "ðŸš§ Not supported on $Config{osname} for $instance: # $_\n";
+        next;
+    }
+    if ($test{mode} eq "forward" && $test{guest_ip} eq "0.0.0.0" && $test{host_port} eq $test{guest_port} && $instance eq "wsl2") {
+        printf "ðŸš§ Not supported on $Config{osname} for $instance: # $_\n";
+        next;
+    }
+    if ($test{mode} eq "ignore" && $test{host_ip} eq "127.0.0.1" && $test{guest_ip} eq "127.0.0.1" && $test{host_port} eq $test{guest_port} && $instance eq "wsl2") {
+        printf "ðŸš§ Not supported on $Config{osname} for $instance: # $_\n";
+        next;
+    }
+    if ($test{mode} eq "ignore" && $test{host_ip} eq "127.0.0.1" && $test{guest_ip} eq "0.0.0.0" && $test{host_port} eq $test{guest_port} && $instance eq "wsl2") {
+        printf "ðŸš§ Not supported on $Config{osname} for $instance: # $_\n";
+        next;
+    }
 
     my $remote = JoinHostPort($test{guest_ip},$test{guest_port});
     my $local = JoinHostPort($test{host_ip},$test{host_port});
diff --git a/hack/test-templates.sh b/hack/test-templates.sh
index 0c32d762..5f1baee1 100755
--- a/hack/test-templates.sh
+++ b/hack/test-templates.sh
@@ -349,6 +349,9 @@ if [[ -n ${CHECKS["port-forwards"]} ]]; then
 		else
 			hostip=$(perl -MSocket -MSys::Hostname -E 'say inet_ntoa(scalar gethostbyname(hostname()))')
 		fi
+		if [[ "$(uname -o)" = "Msys" && "${LIMA_SSH_PORT_FORWARDER-true}" != "false" ]]; then
+			hostip=$(wsl -d lima-infra ip -4 -o addr show eth0 | awk '{print $4}' | cut -d/ -f1)
+		fi
 		if [ -n "${hostip}" ]; then
 			sudo=""
 			if [[ ${NAME} == "alpine"* ]]; then
diff --git a/pkg/hostagent/hostagent.go b/pkg/hostagent/hostagent.go
index 248e76bd..3e39c7d8 100644
--- a/pkg/hostagent/hostagent.go
+++ b/pkg/hostagent/hostagent.go
@@ -14,6 +14,7 @@ import (
 	"os"
 	"os/exec"
 	"path/filepath"
+	"runtime"
 	"strconv"
 	"strings"
 	"sync"
@@ -135,7 +136,11 @@ func New(instName string, stdout io.Writer, signalCh chan os.Signal, opts ...Opt
 		vSockPort = port
 	} else if *inst.Config.VMType == limayaml.QEMU {
 		// virtserialport doesn't seem to work reliably: https://github.com/lima-vm/lima/issues/2064
-		virtioPort = "" // filenames.VirtioPort
+		if runtime.GOOS != "windows" {
+			virtioPort = "" // filenames.VirtioPort
+		} else {
+			virtioPort = filenames.VirtioPort
+		}
 	}
 
 	if err := cidata.GenerateCloudConfig(inst.Dir, instName, inst.Config); err != nil {
diff --git a/pkg/qemu/qemu.go b/pkg/qemu/qemu.go
index ede6686c..06172198 100644
--- a/pkg/qemu/qemu.go
+++ b/pkg/qemu/qemu.go
@@ -1101,7 +1101,7 @@ func qemuEdk2Arch(arch limayaml.Arch) string {
 }
 
 func Exe(arch limayaml.Arch) (exe string, args []string, err error) {
-	exeBase := "qemu-system-" + qemuArch(arch)
+	exeBase := "qemu-system-" + qemuArch(arch) + "w"
 	envK := "QEMU_SYSTEM_" + strings.ToUpper(qemuArch(arch))
 	if envV := os.Getenv(envK); envV != "" {
 		ss, err := shellwords.Parse(envV)
-- 
2.48.1

