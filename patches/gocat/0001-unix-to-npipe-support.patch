From b4d4b0711c31e50597e4f1e3ddbf1902e41d79f3 Mon Sep 17 00:00:00 2001
From: Arthur Sengileyev <arthur.sengileyev@gmail.com>
Date: Wed, 31 Aug 2022 16:43:37 +0300
Subject: [PATCH] unix-to-npipe support

---
 cmd/root.go                         |   1 +
 cmd/unix_to_npipe.go                | 111 ++++++++++++++++++++++++++++
 go.mod                              |   1 +
 go.sum                              |   5 ++
 internal/relay/unix_socket_npipe.go |  82 ++++++++++++++++++++
 5 files changed, 200 insertions(+)
 create mode 100644 cmd/unix_to_npipe.go
 create mode 100644 internal/relay/unix_socket_npipe.go

diff --git a/cmd/root.go b/cmd/root.go
index 77c1562..a30a49c 100644
--- a/cmd/root.go
+++ b/cmd/root.go
@@ -45,6 +45,7 @@ func NewRootCmd(osExecutor os.OsExecutor, logger logger.Logger) *cobra.Command {
 		NewFakeCmd(logger),
 		NewTCPToUnixCmd(logger),
 		NewUnixToTCPCmd(logger),
+		NewUnixToNPipeCmd(logger),
 		NewVersionCmd(osExecutor),
 	)
 	return cmdInstance
diff --git a/cmd/unix_to_npipe.go b/cmd/unix_to_npipe.go
new file mode 100644
index 0000000..75f9564
--- /dev/null
+++ b/cmd/unix_to_npipe.go
@@ -0,0 +1,111 @@
+// Copyright 2018 SumUp Ltd.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package cmd
+
+import (
+	"context"
+	"os"
+	"os/signal"
+	"syscall"
+	"time"
+
+	"github.com/palantir/stacktrace"
+	"github.com/spf13/cobra"
+	"github.com/sumup-oss/go-pkgs/logger"
+
+	"github.com/sumup-oss/gocat/internal/relay"
+)
+
+func NewUnixToNPipeCmd(logger logger.Logger) *cobra.Command {
+	var unixToTCPSocketPath string
+	var unixToTCPPipePath string
+	var bufferSize int
+	var unixToTCPHealthCheckDuration time.Duration
+
+	cmdInstance := &cobra.Command{
+		Use:   "unix-to-npipe",
+		Short: "relay from a unix source to npipe clients",
+		Long:  `relay from a unix source to npipe clients`,
+		RunE: func(command *cobra.Command, args []string) error {
+			// nolint: gocritic
+			if len(unixToTCPSocketPath) < 0 {
+				return stacktrace.NewError("blank/empty `src` specified")
+			}
+
+			// nolint: gocritic
+			if len(unixToTCPPipePath) < 0 {
+				return stacktrace.NewError("blank/empty `dst` specified")
+			}
+
+			relayer, err := relay.NewUnixSocketNPipe(
+				logger,
+				unixToTCPHealthCheckDuration,
+				unixToTCPSocketPath,
+				unixToTCPPipePath,
+				bufferSize,
+			)
+			if err != nil {
+				return stacktrace.Propagate(err, "couldn't create relay from unix socket to TCP")
+			}
+
+			osSignalCh := make(chan os.Signal, 1)
+			defer close(osSignalCh)
+
+			signal.Notify(osSignalCh, os.Interrupt, syscall.SIGTERM)
+
+			ctx, cancelFunc := context.WithCancel(context.Background())
+			defer cancelFunc()
+
+			// Ctrl+C handler
+			go func() {
+				<-osSignalCh
+				signal.Stop(osSignalCh)
+				cancelFunc()
+			}()
+
+			err = relayer.Relay(ctx)
+			return stacktrace.Propagate(err, "couldn't relay from unix socket to TCP")
+		},
+	}
+
+	cmdInstance.Flags().DurationVar(
+		&unixToTCPHealthCheckDuration,
+		"health-check-interval",
+		30*time.Second,
+		"health check interval for `src`, e.g values are 30m, 60s, 1h.",
+	)
+	cmdInstance.Flags().StringVar(
+		&unixToTCPSocketPath,
+		"src",
+		"",
+		"source of unix domain socket",
+	)
+	_ = cmdInstance.MarkFlagRequired("src")
+	cmdInstance.Flags().StringVar(
+		&unixToTCPPipePath,
+		"dst",
+		"",
+		"destination to NPipe listen",
+	)
+	_ = cmdInstance.MarkFlagRequired("dst")
+	cmdInstance.Flags().IntVar(
+		&bufferSize,
+		"buffer-size",
+		DefaultBufferSize,
+		"Buffer size in bytes of the data stream",
+	)
+
+	return cmdInstance
+}
diff --git a/go.mod b/go.mod
index 00db127..7ea906e 100644
--- a/go.mod
+++ b/go.mod
@@ -1,6 +1,7 @@
 module github.com/sumup-oss/gocat
 
 require (
+	github.com/Microsoft/go-winio v0.5.2 // indirect
 	github.com/elliotchance/orderedmap v1.2.0 // indirect
 	github.com/googleapis/gnostic v0.2.0 // indirect
 	github.com/hashicorp/vault/api v1.0.1 // indirect
diff --git a/go.sum b/go.sum
index 680d048..faa85ca 100644
--- a/go.sum
+++ b/go.sum
@@ -6,6 +6,8 @@ github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03
 github.com/CloudyKit/fastprinter v0.0.0-20200109182630-33d98a066a53/go.mod h1:+3IMCy2vIlbG1XG/0ggNQv0SvxCAIpPM5b1nCz56Xno=
 github.com/CloudyKit/jet/v3 v3.0.0/go.mod h1:HKQPgSJmdK8hdoAbKUUWajkHyHo4RaU5rMdUywE7VMo=
 github.com/Joker/hpp v1.0.0/go.mod h1:8x5n+M1Hp5hC0g8okX3sR3vFQwynaX/UgSOM9MeBKzY=
+github.com/Microsoft/go-winio v0.5.2 h1:a9IhgEQBCUEk6QCdml9CiJGhAws+YwffDHEMp1VMrpA=
+github.com/Microsoft/go-winio v0.5.2/go.mod h1:WpS1mjBmmwHBEWmogvA2mj8546UReBk4v8QkMxJ6pZY=
 github.com/Shopify/goreferrer v0.0.0-20181106222321-ec9c9a553398/go.mod h1:a1uqRtAwp2Xwc6WNPJEufxJ7fx3npB4UV/JOLmbu5I0=
 github.com/ajg/form v1.5.1/go.mod h1:uL1WgH+h2mgNtvBq0339dVnzXdBETtL2LeUXaIv25UY=
 github.com/armon/consul-api v0.0.0-20180202201655-eb2c6b5be1b6/go.mod h1:grANhF5doyWs3UAsr3K4I6qtAmlQcZDesFNEHPZAzj8=
@@ -193,6 +195,8 @@ github.com/sirupsen/logrus v1.4.1 h1:GL2rEmy6nsikmW0r8opw9JIRScdMF5hA8cOYLH7In1k
 github.com/sirupsen/logrus v1.4.1/go.mod h1:ni0Sbl8bgC9z8RoU9G6nDWqqs/fq4eDPysMBDgk/93Q=
 github.com/sirupsen/logrus v1.4.2 h1:SPIRibHv4MatM3XXNO2BJeFLZwZ2LvZgfQ5+UNI2im4=
 github.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=
+github.com/sirupsen/logrus v1.7.0 h1:ShrD1U9pZB12TX0cVy0DtePoCH97K8EtX+mg7ZARUtM=
+github.com/sirupsen/logrus v1.7.0/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=
 github.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=
 github.com/smartystreets/goconvey v1.6.4/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=
 github.com/spf13/afero v1.1.2/go.mod h1:j4pytiNVoe2o6bmDsKpLACNPDBIoEAkihy7loJ1B0CQ=
@@ -334,6 +338,7 @@ golang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae/go.mod h1:h1NjWce9XRLGQEsW7w
 golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f h1:+Nyd8tzPX9R7BWHguqsrbFdRx3WQ/1ib8I44HXV5yTA=
 golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20210124154548-22da62e12c0c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210403161142-5e06dd20ab57/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
diff --git a/internal/relay/unix_socket_npipe.go b/internal/relay/unix_socket_npipe.go
new file mode 100644
index 0000000..c94617d
--- /dev/null
+++ b/internal/relay/unix_socket_npipe.go
@@ -0,0 +1,82 @@
+// Copyright 2018 SumUp Ltd.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package relay
+
+import (
+	"context"
+	"net"
+	"os"
+	"time"
+
+	"github.com/Microsoft/go-winio"
+	"github.com/palantir/stacktrace"
+	"github.com/sumup-oss/go-pkgs/logger"
+)
+
+type UnixSocketNPipe struct {
+	AbstractDuplexRelay
+}
+
+func NewUnixSocketNPipe(
+	logger logger.Logger,
+	healthCheckInterval time.Duration,
+	unixSocketPath,
+	pipePath string,
+	bufferSize int,
+) (*UnixSocketNPipe, error) {
+	// FIXME pipePathValudate
+
+	_, err := os.Stat(unixSocketPath)
+	if os.IsNotExist(err) {
+		return nil, stacktrace.Propagate(err, "could not stat %s", unixSocketPath)
+	}
+
+	return &UnixSocketNPipe{
+		AbstractDuplexRelay{
+			healthCheckInterval: healthCheckInterval,
+			logger:              logger,
+			bufferSize:          bufferSize,
+			sourceName:          "unix socket",
+			destinationName:     "NPipe connection",
+			destinationAddr:     pipePath,
+			dialSourceConn: func(ctx context.Context) (net.Conn, error) {
+				dialer := &net.Dialer{}
+				// NOTE: This is a streaming unix domain socket
+				// equivalent of `sock.STREAM`.
+				conn, err := dialer.DialContext(ctx, "unix", unixSocketPath)
+				if err != nil {
+					return nil, stacktrace.Propagate(
+						err,
+						"failed to dial unix address: %s",
+						unixSocketPath,
+					)
+				}
+
+				return conn, nil
+			},
+			listenTargetConn: func(ctx context.Context) (net.Listener, error) {
+				listener, err := winio.ListenPipe(pipePath, nil)
+				if err != nil {
+					return nil, stacktrace.Propagate(
+						err,
+						"failed to listen at NPipe address: %s",
+						pipePath,
+					)
+				}
+				return listener, nil
+			},
+		},
+	}, nil
+}
-- 
2.37.3

