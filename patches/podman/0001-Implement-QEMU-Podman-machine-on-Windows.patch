From f886b9ffee250e7709a1bc39c489c83e4e090f39 Mon Sep 17 00:00:00 2001
From: Arthur Sengileyev <arthur.sengileyev@gmail.com>
Date: Tue, 20 Feb 2024 21:52:34 +0200
Subject: [PATCH] Implement QEMU Podman machine on Windows

Signed-off-by: Arthur Sengileyev <arthur.sengileyev@gmail.com>
---
 pkg/machine/e2e/README.md                      | 11 +++++++++++
 pkg/machine/e2e/init_test.go                   |  3 +++
 pkg/machine/provider/platform_windows.go       |  2 ++
 pkg/machine/provider/platform_windows_amd64.go | 10 ++++++++++
 pkg/machine/provider/platform_windows_arm64.go | 12 ++++++++++++
 pkg/machine/qemu/machine.go                    |  2 +-
 pkg/machine/qemu/options_windows_amd64.go      |  2 +-
 pkg/machine/qemu/stubber.go                    |  2 +-
 pkg/machine/vmconfigs/config_windows.go        | 10 +++++++++-
 9 files changed, 50 insertions(+), 4 deletions(-)
 create mode 100644 pkg/machine/provider/platform_windows_amd64.go
 create mode 100644 pkg/machine/provider/platform_windows_arm64.go

diff --git a/pkg/machine/e2e/README.md b/pkg/machine/e2e/README.md
index 4b737b686..2f47d739a 100644
--- a/pkg/machine/e2e/README.md
+++ b/pkg/machine/e2e/README.md
@@ -28,6 +28,17 @@ Note: To run specific test files, add the test files to the end of the winmake c
 
 `./winmake localmachine "basic_test.go start_test.go"`
 
+### QEMU
+1. Install QEMU and add it to either user or sysmem PATH variable
+1. Install Podman release (is needed to have gvproxy binary)
+1. Open a powershell as a regular user
+1. $env:CONTAINERS_MACHINE_PROVIDER="qemu"
+1. `./winmake localmachine`
+
+Note: To run specific test files, add the test files to the end of the winmake command:
+
+`./winmake localmachine "basic_test.go start_test.go"`
+
 ## MacOS
 
 ### Apple Hypervisor
diff --git a/pkg/machine/e2e/init_test.go b/pkg/machine/e2e/init_test.go
index b0877e9c9..27d947943 100644
--- a/pkg/machine/e2e/init_test.go
+++ b/pkg/machine/e2e/init_test.go
@@ -202,6 +202,9 @@ var _ = Describe("podman machine init", func() {
 			Skip("volumes are not supported on hyperv yet")
 		}
 		skipIfWSL("WSL volumes are much different.  This test will not pass as is")
+		if testProvider.VMType() == define.QemuVirt && runtime.GOOS == "windows" {
+			Skip("volumes are not yet supported on official qemu builds running under Windows")
+		}
 
 		tmpDir, err := os.MkdirTemp("", "")
 		Expect(err).ToNot(HaveOccurred())
diff --git a/pkg/machine/provider/platform_windows.go b/pkg/machine/provider/platform_windows.go
index 943a66926..3a19f3964 100644
--- a/pkg/machine/provider/platform_windows.go
+++ b/pkg/machine/provider/platform_windows.go
@@ -33,6 +33,8 @@ func Get() (vmconfigs.VMProvider, error) {
 		return new(wsl.WSLStubber), nil
 	case define.HyperVVirt:
 		return new(hyperv.HyperVStubber), nil
+	case define.QemuVirt:
+		return getQemuProvider()
 	default:
 		return nil, fmt.Errorf("unsupported virtualization provider: `%s`", resolvedVMType.String())
 	}
diff --git a/pkg/machine/provider/platform_windows_amd64.go b/pkg/machine/provider/platform_windows_amd64.go
new file mode 100644
index 000000000..04bfc0734
--- /dev/null
+++ b/pkg/machine/provider/platform_windows_amd64.go
@@ -0,0 +1,10 @@
+package provider
+
+import (
+	"github.com/containers/podman/v5/pkg/machine/qemu"
+	"github.com/containers/podman/v5/pkg/machine/vmconfigs"
+)
+
+func getQemuProvider() (vmconfigs.VMProvider, error) {
+	return new(qemu.QEMUStubber), nil
+}
diff --git a/pkg/machine/provider/platform_windows_arm64.go b/pkg/machine/provider/platform_windows_arm64.go
new file mode 100644
index 000000000..ded7ad7b1
--- /dev/null
+++ b/pkg/machine/provider/platform_windows_arm64.go
@@ -0,0 +1,12 @@
+package provider
+
+import (
+	"fmt"
+
+	"github.com/containers/podman/v5/pkg/machine/define"
+	"github.com/containers/podman/v5/pkg/machine/vmconfigs"
+)
+
+func getQemuProvider() (vmconfigs.VMProvider, error) {
+	return nil, fmt.Errorf("unsupported virtualization provider: `%s`", define.QemuVirt.String())
+}
diff --git a/pkg/machine/qemu/machine.go b/pkg/machine/qemu/machine.go
index 2595eb54f..1373663c3 100644
--- a/pkg/machine/qemu/machine.go
+++ b/pkg/machine/qemu/machine.go
@@ -1,4 +1,4 @@
-//go:build linux || freebsd
+//go:build linux || freebsd || windows
 
 package qemu
 
diff --git a/pkg/machine/qemu/options_windows_amd64.go b/pkg/machine/qemu/options_windows_amd64.go
index 1a929a5f3..6e0ba0271 100644
--- a/pkg/machine/qemu/options_windows_amd64.go
+++ b/pkg/machine/qemu/options_windows_amd64.go
@@ -1,4 +1,4 @@
-//go:build tempoff
+//go:build windows && amd64
 
 package qemu
 
diff --git a/pkg/machine/qemu/stubber.go b/pkg/machine/qemu/stubber.go
index 9fd158063..fa5f25ff2 100644
--- a/pkg/machine/qemu/stubber.go
+++ b/pkg/machine/qemu/stubber.go
@@ -1,4 +1,4 @@
-//go:build linux || freebsd
+//go:build linux || freebsd || windows
 
 package qemu
 
diff --git a/pkg/machine/vmconfigs/config_windows.go b/pkg/machine/vmconfigs/config_windows.go
index 0562490c7..f732226f6 100644
--- a/pkg/machine/vmconfigs/config_windows.go
+++ b/pkg/machine/vmconfigs/config_windows.go
@@ -1,7 +1,9 @@
 package vmconfigs
 
 import (
+	"github.com/containers/podman/v5/pkg/machine/define"
 	"github.com/containers/podman/v5/pkg/machine/hyperv/vsock"
+	"github.com/containers/podman/v5/pkg/machine/qemu/command"
 )
 
 type HyperVConfig struct {
@@ -17,8 +19,14 @@ type WSLConfig struct {
 	UserModeNetworking bool
 }
 
+type QEMUConfig struct {
+	// QMPMonitor is the qemu monitor object for sending commands
+	QMPMonitor command.Monitor
+	// QEMUPidPath is where to write the PID for QEMU when running
+	QEMUPidPath *define.VMFile
+}
+
 // Stubs
-type QEMUConfig struct{}
 type AppleHVConfig struct{}
 
 func getHostUID() int {
-- 
2.44.0

