From 507632b797d0531caee5490f9c47df937031f1e5 Mon Sep 17 00:00:00 2001
From: Arthur Sengileyev <arthur.sengileyev@gmail.com>
Date: Tue, 20 Feb 2024 21:52:34 +0200
Subject: [PATCH 2/3] Implement QEMU Podman machine on Windows

Signed-off-by: Arthur Sengileyev <arthur.sengileyev@gmail.com>
---
 pkg/machine/e2e/README.md                     |  9 +++++++++
 pkg/machine/e2e/basic_test.go                 | 10 ++++++++++
 pkg/machine/e2e/config_init_test.go           |  6 ++++++
 pkg/machine/e2e/init_test.go                  |  3 +++
 pkg/machine/provider/platform_windows.go      |  6 +++---
 .../provider/platform_windows_amd64.go        | 18 ++++++++++++++++++
 .../provider/platform_windows_arm64.go        | 19 +++++++++++++++++++
 7 files changed, 68 insertions(+), 3 deletions(-)
 create mode 100644 pkg/machine/provider/platform_windows_amd64.go
 create mode 100644 pkg/machine/provider/platform_windows_arm64.go

diff --git a/pkg/machine/e2e/README.md b/pkg/machine/e2e/README.md
index ae6873f42..55cdab839 100644
--- a/pkg/machine/e2e/README.md
+++ b/pkg/machine/e2e/README.md
@@ -64,6 +64,15 @@ above.
 1. `$env:CONTAINERS_MACHINE_PROVIDER="wsl"`
 1. `.\winmake localmachine`
 
+### QEMU
+
+1. Install QEMU and add it to either user or sysmem PATH variable
+1. Open a powershell as a regular user
+1. `.\winmake.ps1 podman-remote && .\winmake.ps1 win-gvproxy`
+1. `$env:CONTAINERS_HELPER_BINARY_DIR="$pwd\bin\windows"`
+1. `$env:CONTAINERS_MACHINE_PROVIDER="qemu"`
+1. `.\winmake localmachine`
+
 ## MacOS
 
 Macs now support two different machine providers: `applehv` and `libkrun`. The
diff --git a/pkg/machine/e2e/basic_test.go b/pkg/machine/e2e/basic_test.go
index 12d8bf9e3..502b45a60 100644
--- a/pkg/machine/e2e/basic_test.go
+++ b/pkg/machine/e2e/basic_test.go
@@ -9,6 +9,7 @@ import (
 	"os"
 	"path"
 	"path/filepath"
+	"runtime"
 	"time"
 
 	"github.com/containers/podman/v5/pkg/machine/define"
@@ -62,6 +63,9 @@ var _ = Describe("run basic podman commands", func() {
 	It("Volume ops", func() {
 		skipIfVmtype(define.HyperVVirt, "FIXME: #21036 - Hyper-V podman run -v fails due to path translation issues")
 		skipIfVmtype(define.LibKrun, "FIXME: #23296 - Fails on MacOS when libkrun in use.")
+		if testProvider.VMType() == define.QemuVirt && runtime.GOOS == "windows" {
+			Skip("volumes are not yet supported on official QEMU builds running under Windows")
+		}
 
 		tDir, err := filepath.Abs(GinkgoT().TempDir())
 		Expect(err).ToNot(HaveOccurred())
@@ -95,6 +99,9 @@ var _ = Describe("run basic podman commands", func() {
 		// In theory this could run on MacOS too, but we know virtiofs works for that now,
 		// this is just testing linux
 		skipIfNotVmtype(define.QemuVirt, "This is just adding coverage for virtiofs on linux")
+		if testProvider.VMType() == define.QemuVirt && runtime.GOOS == "windows" {
+			Skip("volumes are not yet supported on official QEMU builds running under Windows")
+		}
 
 		tDir, err := filepath.Abs(GinkgoT().TempDir())
 		Expect(err).ToNot(HaveOccurred())
@@ -185,6 +192,9 @@ var _ = Describe("run basic podman commands", func() {
 
 	It("podman volume on non-standard path", func() {
 		skipIfWSL("Requires standard volume handling")
+		if testProvider.VMType() == define.QemuVirt && runtime.GOOS == "windows" {
+			Skip("volumes are not yet supported on official QEMU builds running under Windows")
+		}
 		dir, err := os.MkdirTemp("", "machine-volume")
 		Expect(err).ToNot(HaveOccurred())
 		defer os.RemoveAll(dir)
diff --git a/pkg/machine/e2e/config_init_test.go b/pkg/machine/e2e/config_init_test.go
index 9d33e2d3d..0ae8f4fee 100644
--- a/pkg/machine/e2e/config_init_test.go
+++ b/pkg/machine/e2e/config_init_test.go
@@ -1,9 +1,11 @@
 package e2e_test
 
 import (
+	"runtime"
 	"strconv"
 	"strings"
 
+	"github.com/containers/podman/v5/pkg/machine/define"
 	. "github.com/onsi/ginkgo/v2"
 	. "github.com/onsi/gomega"
 	. "github.com/onsi/gomega/gexec"
@@ -67,6 +69,10 @@ func (i *initMachine) buildCmd(m *machineTestBuilder) []string {
 	for _, v := range i.volumes {
 		cmd = append(cmd, "--volume", v)
 	}
+	// Suppress default mounts for QEMU on Widows
+	if len(i.volumes) == 0 && testProvider.VMType() == define.QemuVirt && runtime.GOOS == "windows" {
+		cmd = append(cmd, "--volume", "")
+	}
 	if i.now {
 		cmd = append(cmd, "--now")
 	}
diff --git a/pkg/machine/e2e/init_test.go b/pkg/machine/e2e/init_test.go
index 63c0336e9..1bc94bd3b 100644
--- a/pkg/machine/e2e/init_test.go
+++ b/pkg/machine/e2e/init_test.go
@@ -202,6 +202,9 @@ var _ = Describe("podman machine init", func() {
 			Skip("volumes are not supported on hyperv yet")
 		}
 		skipIfWSL("WSL volumes are much different.  This test will not pass as is")
+		if testProvider.VMType() == define.QemuVirt && runtime.GOOS == "windows" {
+			Skip("volumes are not yet supported on official QEMU builds running under Windows")
+		}
 
 		tmpDir, err := os.MkdirTemp("", "")
 		Expect(err).ToNot(HaveOccurred())
diff --git a/pkg/machine/provider/platform_windows.go b/pkg/machine/provider/platform_windows.go
index 772693669..ea7695f49 100644
--- a/pkg/machine/provider/platform_windows.go
+++ b/pkg/machine/provider/platform_windows.go
@@ -38,15 +38,15 @@ func Get() (vmconfigs.VMProvider, error) {
 			return nil, fmt.Errorf("hyperv machines require admin authority")
 		}
 		return new(hyperv.HyperVStubber), nil
+	case define.QemuVirt:
+		return getQemuProvider()
 	default:
 		return nil, fmt.Errorf("unsupported virtualization provider: `%s`", resolvedVMType.String())
 	}
 }
 
 func GetAll(force bool) ([]vmconfigs.VMProvider, error) {
-	providers := []vmconfigs.VMProvider{
-		new(wsl.WSLStubber),
-	}
+	providers := getDefaultProviders()
 	if !wsl.HasAdminRights() && !force {
 		logrus.Warn("managing hyperv machines require admin authority.")
 	} else {
diff --git a/pkg/machine/provider/platform_windows_amd64.go b/pkg/machine/provider/platform_windows_amd64.go
new file mode 100644
index 000000000..78b596619
--- /dev/null
+++ b/pkg/machine/provider/platform_windows_amd64.go
@@ -0,0 +1,18 @@
+package provider
+
+import (
+	"github.com/containers/podman/v5/pkg/machine/qemu"
+	"github.com/containers/podman/v5/pkg/machine/vmconfigs"
+	"github.com/containers/podman/v5/pkg/machine/wsl"
+)
+
+func getQemuProvider() (vmconfigs.VMProvider, error) {
+	return new(qemu.QEMUStubber), nil
+}
+
+func getDefaultProviders() []vmconfigs.VMProvider {
+	return []vmconfigs.VMProvider{
+		new(wsl.WSLStubber),
+		new(qemu.QEMUStubber),
+	}
+}
diff --git a/pkg/machine/provider/platform_windows_arm64.go b/pkg/machine/provider/platform_windows_arm64.go
new file mode 100644
index 000000000..e393d3308
--- /dev/null
+++ b/pkg/machine/provider/platform_windows_arm64.go
@@ -0,0 +1,19 @@
+package provider
+
+import (
+	"fmt"
+
+	"github.com/containers/podman/v5/pkg/machine/define"
+	"github.com/containers/podman/v5/pkg/machine/vmconfigs"
+	"github.com/containers/podman/v5/pkg/machine/wsl"
+)
+
+func getQemuProvider() (vmconfigs.VMProvider, error) {
+	return nil, fmt.Errorf("unsupported virtualization provider: `%s`", define.QemuVirt.String())
+}
+
+func getDefaultProviders() []vmconfigs.VMProvider {
+	return []vmconfigs.VMProvider{
+		new(wsl.WSLStubber),
+	}
+}
-- 
2.46.0

